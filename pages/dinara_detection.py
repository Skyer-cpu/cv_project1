import streamlit as st
from PIL import Image
import requests
from io import BytesIO
from ultralytics import YOLO
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
import os

st.set_page_config(page_title="Brain Tumor Detection", layout="wide")
st.title("üß† –î–µ—Ç–µ–∫—Ü–∏—è –æ–ø—É—Ö–æ–ª–µ–π –º–æ–∑–≥–∞ (YOLOv11)")

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
MODEL_DIR = "models"
MODEL_NAME = "dinara_yolov11_best.pt"
MODEL_PATH = os.path.join(MODEL_DIR, MODEL_NAME)


# --- –ó–∞–≥—Ä—É–∑–∫–∞ –æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏ ---
@st.cache_resource # –ö—ç—à–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥–µ–ª—å, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∏ –∫–∞–∂–¥–æ–º –∑–∞–ø—É—Å–∫–µ
def load_model(path):
    if not os.path.exists(path):
        st.error(f"–û—à–∏–±–∫–∞: –§–∞–π–ª –º–æ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏ {path}. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ '{MODEL_NAME}' –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∫–∞—Ç–∞–ª–æ–≥–µ '{MODEL_DIR}'.")
        return None
    try:
        model = YOLO(path)
        st.success(f"–ú–æ–¥–µ–ª—å '{MODEL_NAME}' —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞! –ú–æ–∂–Ω–æ –ø—Ä–∏—Å—Ç—É–ø–∞—Ç—å –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é.")
        return model
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥–µ–ª–∏: {e}")
        return None

model = load_model(MODEL_PATH)

# ===== –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π =====
tab1, tab2 = st.tabs(["üìÇ –ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", "üåê –ü–æ —Å—Å—ã–ª–∫–µ"])

imgs = []

with tab1:
    uploaded_files = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –æ–¥–Ω–æ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:", type=["jpg", "png"], accept_multiple_files=True)
    for file in uploaded_files:
        imgs.append(Image.open(file))

with tab2:
    url = st.text_input("–í—Å—Ç–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (jpeg/png):")
    if url:
        try:
            response = requests.get(url)
            img = Image.open(BytesIO(response.content))
            imgs.append(img)
        except:
            st.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ —Å—Å—ã–ª–∫–µ.")

# ===== –ò–Ω—Ñ–µ—Ä–µ–Ω—Å –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ =====
if imgs:
    for img in imgs:
        st.markdown("---")
        st.image(img, caption="–û—Ä–∏–≥–∏–Ω–∞–ª", width=400)

        # YOLOv11 –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
        results = model.predict(img, conf=0.25)

        for r in results:
            annotated_img = r.plot()  # –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –±–æ–∫c–∞–º–∏
            st.image(annotated_img, caption="–†–µ–∑—É–ª—å—Ç–∞—Ç –¥–µ—Ç–µ–∫—Ü–∏–∏", width=600)

# ===== –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏ =====
with st.expander("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏ –∏ –º–µ—Ç—Ä–∏–∫–∏"):
    st.markdown("""
    **YOLOv11** –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∞—Å—å –¥–ª—è –¥–µ—Ç–µ–∫—Ü–∏–∏ –æ–ø—É—Ö–æ–ª–µ–π –Ω–∞ MR-—Å–Ω–∏–º–∫–∞—Ö.

    - üì¶ **–†–∞–∑–º–µ—Ä –æ–±—É—á–∞—é—â–µ–π –≤—ã–±–æ—Ä–∫–∏:** 310 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π  
    - üì¶ **–†–∞–∑–º–µ—Ä –≤–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω–æ–π –≤—ã–±–æ—Ä–∫–∏:** 75 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π  
    - üîÅ **–≠–ø–æ—Ö–∏ –æ–±—É—á–µ–Ω–∏—è:** 50 —ç–ø–æ—Ö *3 –º–æ–¥–µ–ª–∏ = 150  
    - üéØ **mAP50:** 0.88  
    - üéØ **mAP50-95:** 0.60
    """)


    # –ó–∞–≥—Ä—É–∑–∫–∞ MaP
    st.markdown("**box_f1_curve - –¥–µ—Ç–µ–∫—Ü–∏—è –æ–ø—É—Ö–æ–ª–µ–π –º–æ–∑–≥–∞ (YOLOv11):**")
    cm_image = Image.open("images/dinara_map.jpg")
    st.image(cm_image, caption="Confusion Matrix", use_container_width=True)

    # –ó–∞–≥—Ä—É–∑–∫–∞ PR-–∫—Ä–∏–≤–æ–π –∏–∑ —Ñ–∞–π–ª–∞
    st.markdown("**PR-–∫—Ä–∏–≤–∞—è - –¥–µ—Ç–µ–∫—Ü–∏—è –æ–ø—É—Ö–æ–ª–µ–π –º–æ–∑–≥–∞ (YOLOv11):**")
    pr_curve = Image.open("images/dinara_BoxPR_curve.png")
    st.image(pr_curve, caption="PR-–∫—Ä–∏–≤–∞—è", use_container_width=True)

    # –ó–∞–≥—Ä—É–∑–∫–∞ confusion matrix –∏–∑ —Ñ–∞–π–ª–∞
    st.markdown("**–ú–∞—Ç—Ä–∏—Ü–∞ –æ—à–∏–±–æ–∫ - –¥–µ—Ç–µ–∫—Ü–∏—è –æ–ø—É—Ö–æ–ª–µ–π –º–æ–∑–≥–∞ (YOLOv11):**")
    cm_image = Image.open("images/dinara_confusion_matrix.png")
    st.image(cm_image, caption="Confusion Matrix", use_container_width=True)


