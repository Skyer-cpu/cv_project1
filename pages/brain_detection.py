import streamlit as st
from PIL import Image
import requests
from io import BytesIO
from ultralytics import YOLO
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
import os
import torch

st.set_page_config(page_title="Brain Tumor Detection", layout="wide")
st.title("üß† –î–µ—Ç–µ–∫—Ü–∏—è –æ–ø—É—Ö–æ–ª–µ–π –º–æ–∑–≥–∞ (YOLOv8)")  # –ò–∑–º–µ–Ω–∏–ª –Ω–∞ YOLOv8, —Ç–∞–∫ –∫–∞–∫ YOLOv11 –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
MODEL_DIR = "models"
MODEL_NAME = "dinara_yolov11_best.pt"  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ YOLOv8 –º–æ–¥–µ–ª—å
MODEL_PATH = os.path.join(MODEL_DIR, MODEL_NAME)

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏ ---
@st.cache_resource
def load_model(path):
    if not os.path.exists(path):
        st.error(f"–û—à–∏–±–∫–∞: –§–∞–π–ª –º–æ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏ {path}. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ '{MODEL_NAME}' –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∫–∞—Ç–∞–ª–æ–≥–µ '{MODEL_DIR}'.")
        return None
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å GPU
        device = 'cuda' if torch.cuda.is_available() else 'cpu'
        st.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {device.upper()}")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å
        model = YOLO(path)
        model.to(device)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å
        if model is not None:
            st.success(f"–ú–æ–¥–µ–ª—å '{MODEL_NAME}' —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞! –ú–æ–∂–Ω–æ –ø—Ä–∏—Å—Ç—É–ø–∞—Ç—å –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é.")
            return model
        else:
            st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª—å.")
            return None
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥–µ–ª–∏: {str(e)}")
        return None

model = load_model(MODEL_PATH)

# ===== –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π =====
tab1, tab2 = st.tabs(["üìÇ –ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", "üåê –ü–æ —Å—Å—ã–ª–∫–µ"])

uploaded_files = []
image_url = ""

with tab1:
    uploaded_files = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –æ–¥–Ω–æ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:", type=["jpg", "png", "jpeg"], accept_multiple_files=True)

with tab2:
    image_url = st.text_input("–í—Å—Ç–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (jpeg/png):")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –∏ URL
imgs = []
if uploaded_files:
    for file in uploaded_files:
        try:
            img = Image.open(file)
            imgs.append(img)
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Ñ–∞–π–ª–∞ {file.name}: {str(e)}")

if image_url:
    try:
        response = requests.get(image_url, timeout=5)
        if response.status_code == 200:
            img = Image.open(BytesIO(response.content))
            imgs.append(img)
        else:
            st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ö–æ–¥ —Å—Ç–∞—Ç—É—Å–∞: {response.status_code}")
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ —Å—Å—ã–ª–∫–µ: {str(e)}")

# ===== –ò–Ω—Ñ–µ—Ä–µ–Ω—Å –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ =====
if model is not None and imgs:
    for img in imgs:
        st.markdown("---")
        col1, col2 = st.columns(2)
        
        with col1:
            st.image(img, caption="–û—Ä–∏–≥–∏–Ω–∞–ª", use_column_width=True)
        
        try:
            # YOLO –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
            results = model.predict(img, conf=0.25)
            
            with col2:
                for r in results:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–Ω–Ω–æ—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                    if hasattr(r, 'plot'):
                        annotated_img = r.plot()  # –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å bbox
                        st.image(annotated_img, caption="–†–µ–∑—É–ª—å—Ç–∞—Ç –¥–µ—Ç–µ–∫—Ü–∏–∏", use_column_width=True)
                    else:
                        st.warning("–ú–æ–¥–µ–ª—å –Ω–µ –≤–µ—Ä–Ω—É–ª–∞ –∞–Ω–Ω–æ—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–µ—Ç–µ–∫—Ü–∏–∏
                    if len(r.boxes) > 0:
                        st.info(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {len(r.boxes)} –æ–ø—É—Ö–æ–ª–µ–π.")
                    else:
                        st.info("–û–ø—É—Ö–æ–ª–∏ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã.")
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}")

# ===== –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏ =====
with st.expander("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏ –∏ –º–µ—Ç—Ä–∏–∫–∏"):
    st.markdown("""
    ### **YOLOv8** –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∞—Å—å –¥–ª—è –¥–µ—Ç–µ–∫—Ü–∏–∏ –æ–ø—É—Ö–æ–ª–µ–π –Ω–∞ MR-—Å–Ω–∏–º–∫–∞—Ö.

    - üì¶ **–†–∞–∑–º–µ—Ä –æ–±—É—á–∞—é—â–µ–π –≤—ã–±–æ—Ä–∫–∏:** 310 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π  
    - üì¶ **–†–∞–∑–º–µ—Ä –≤–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω–æ–π –≤—ã–±–æ—Ä–∫–∏:** 75 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π  
    - üîÅ **–≠–ø–æ—Ö–∏ –æ–±—É—á–µ–Ω–∏—è:** 50 —ç–ø–æ—Ö *3 –º–æ–¥–µ–ª–∏ = 150  
    - üéØ **mAP50:** 0.88  
    - üéØ **mAP50-95:** 0.60
    """)

    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    def safe_image_display(image_path, caption):
        try:
            if os.path.exists(image_path):
                img = Image.open(image_path)
                st.image(img, caption=caption, use_container_width=True)
            else:
                st.warning(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: {image_path}")
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {image_path}: {str(e)}")

    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤
    st.markdown("**–ì–†–ê–§–ò–ö ‚Ññ1: mAP - –¥–µ—Ç–µ–∫—Ü–∏—è –æ–ø—É—Ö–æ–ª–µ–π –º–æ–∑–≥–∞ (YOLOv8):**")
    safe_image_display("images/dinara_map.jpg", "Confusion Matrix")
    
    st.markdown("**–ì–†–ê–§–ò–ö ‚Ññ2 box_f1_curve - –¥–µ—Ç–µ–∫—Ü–∏—è –æ–ø—É—Ö–æ–ª–µ–π –º–æ–∑–≥–∞ (YOLOv8):**")
    safe_image_display("images/dinara_BoxF1_curve.png", "F1 Curve")
    
    st.markdown("**–ì–†–ê–§–ò–ö ‚Ññ3 PR-–∫—Ä–∏–≤–∞—è - –¥–µ—Ç–µ–∫—Ü–∏—è –æ–ø—É—Ö–æ–ª–µ–π –º–æ–∑–≥–∞ (YOLOv8):**")
    safe_image_display("images/dinara_BoxPR_curve.png", "PR Curve")
    
    st.markdown("**–ì–†–ê–§–ò–ö ‚Ññ4 –ú–∞—Ç—Ä–∏—Ü–∞ –æ—à–∏–±–æ–∫ - –¥–µ—Ç–µ–∫—Ü–∏—è –æ–ø—É—Ö–æ–ª–µ–π –º–æ–∑–≥–∞ (YOLOv8):**")
    safe_image_display("images/dinara_confusion_matrix.png", "Confusion Matrix")