import streamlit as st
from ultralytics import YOLO
from PIL import Image, ImageFilter
import numpy as np
import os
import pandas as pd
import matplotlib.pyplot as plt
from io import BytesIO

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
MODEL_DIR = "models"
MODEL_NAME = "best_face.pt"
MODEL_PATH = os.path.join(MODEL_DIR, MODEL_NAME)
IMAGE_DIR = "images"

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã ---
st.set_page_config(page_title="Face Detection & Blurring", layout="wide")
st.title("–û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∏ —Ä–∞–∑–º—ã—Ç–∏–µ –ª–∏—Ü —Å –ø–æ–º–æ—â—å—é YOLOv8")
st.write("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")

# --- –£—Ç–∏–ª–∏—Ç—ã ---
def load_image(image_path):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    try:
        return Image.open(image_path)
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {image_path}: {str(e)}")
        return None

def safe_image_display(image_path, caption):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    img = load_image(image_path)
    if img:
        st.image(img, caption=caption, use_container_width=True)
        return True
    return False

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ ---
@st.cache_resource
def load_model(path):
    if not os.path.exists(path):
        st.error(f"–ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {path}")
        return None
    
    try:
        model = YOLO(path)
        st.success("–ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞!")
        return model
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏: {str(e)}")
        return None

trained_model = load_model(MODEL_PATH)

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π ---
def blur_faces(image, model, blur_radius=20):
    if model is None:
        return image

    try:
        img_pil = image.convert('RGB')
        img_np = np.array(img_pil)
        results = model(img_np)

        for r in results:
            for box in r.boxes:
                x1, y1, x2, y2 = map(int, box.xyxy[0])
                x1, y1 = max(0, x1), max(0, y1)
                x2, y2 = min(img_pil.width, x2), min(img_pil.height, y2)
                
                face = img_pil.crop((x1, y1, x2, y2))
                blurred = face.filter(ImageFilter.GaussianBlur(blur_radius))
                img_pil.paste(blurred, (x1, y1))
        return img_pil
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {str(e)}")
        return image

# --- –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å ---
st.header("–ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
uploaded_file = st.file_uploader("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª...", type=["jpg", "jpeg", "png"])

if uploaded_file:
    input_image = Image.open(uploaded_file)
    st.image(input_image, caption="–ò—Å—Ö–æ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", use_column_width=True)
    
    if trained_model:
        with st.spinner("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è..."):
            blurred = blur_faces(input_image, trained_model)
        
        st.image(blurred, caption="–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏", use_column_width=True)
        
        # –ö–Ω–æ–ø–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        buf = BytesIO()
        blurred.save(buf, format="PNG")
        st.download_button(
            "–°–∫–∞—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç",
            buf.getvalue(),
            "blurred_face.png",
            "image/png"
        )

# --- –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –º–µ—Ç—Ä–∏–∫ ---
st.header("üìä –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–∏")

def show_metric_analysis(image_name, title, analysis_text):
    st.subheader(title)
    if safe_image_display(os.path.join(IMAGE_DIR, image_name), title):
        st.markdown(analysis_text)

# F1-–∞–Ω–∞–ª–∏–∑
show_metric_analysis(
    "BoxF1_curveSP.png",
    "–ê–Ω–∞–ª–∏–∑ F1-Confidence Curve",
    """
    ### –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è:
    - –ü–∏–∫ F1=0.85 –ø—Ä–∏ confidence=0.33
    - –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω: 0.3-0.4
    """
)

# Precision-–∞–Ω–∞–ª–∏–∑
show_metric_analysis(
    "BoxP_curveSP.png",
    "–ê–Ω–∞–ª–∏–∑ Precision-Confidence Curve",
    """
    ### –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è:
    - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å 1.0 –ø—Ä–∏ confidence=0.93
    - –î–ª—è –±–∞–ª–∞–Ω—Å–∞ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω: 0.6-0.8
    """
)

# Recall-–∞–Ω–∞–ª–∏–∑
show_metric_analysis(
    "BoxR_curveSP.png",
    "–ê–Ω–∞–ª–∏–∑ Recall-Confidence Curve",
    """
    ### –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è:
    - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π recall 0.93 –ø—Ä–∏ confidence=0
    - –î–ª—è —Å–∫—Ä–∏–Ω–∏–Ω–≥–∞: confidence < 0.2
    """
)

# PR-–∞–Ω–∞–ª–∏–∑
show_metric_analysis(
    "BoxPR_curveSP.png",
    "–ê–Ω–∞–ª–∏–∑ Precision-Recall Curve",
    """
    ### –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è:
    - mAP@0.5 = 0.879
    - –•–æ—Ä–æ—à–∞—è —Ä–∞–±–æ—Ç–∞ –ø—Ä–∏ Recall –¥–æ 0.85
    """
)

# –ú–∞—Ç—Ä–∏—Ü—ã –æ—à–∏–±–æ–∫
st.subheader("–ú–∞—Ç—Ä–∏—Ü—ã –æ—à–∏–±–æ–∫")
cols = st.columns(2)
with cols[0]:
    safe_image_display(os.path.join(IMAGE_DIR, "confusion_matrixSP.png"), "–ú–∞—Ç—Ä–∏—Ü–∞ –æ—à–∏–±–æ–∫")
with cols[1]:
    safe_image_display(os.path.join(IMAGE_DIR, "confusion_matrix_normalizedSP.png"), "–ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –º–∞—Ç—Ä–∏—Ü–∞ –æ—à–∏–±–æ–∫")

# –ì—Ä–∞—Ñ–∏–∫ mAP
st.subheader("–î–∏–Ω–∞–º–∏–∫–∞ –º–µ—Ç—Ä–∏–∫ –æ–±—É—á–µ–Ω–∏—è")
try:
    epochs = list(range(1, 21))
    map50 = [0.775, 0.793, 0.798, 0.816, 0.828, 0.838, 0.844, 0.848, 0.853, 0.857,
             0.857, 0.863, 0.862, 0.867, 0.868, 0.871, 0.874, 0.875, 0.877, 0.879]
    map50_95 = [0.464, 0.482, 0.504, 0.517, 0.525, 0.537, 0.551, 0.549, 0.558, 0.560,
                0.561, 0.564, 0.564, 0.568, 0.575, 0.578, 0.582, 0.580, 0.585, 0.586]

    fig, ax = plt.subplots(figsize=(10, 5))
    ax.plot(epochs, map50, label='mAP50', marker='o')
    ax.plot(epochs, map50_95, label='mAP50-95', marker='s')
    ax.set_title('–î–∏–Ω–∞–º–∏–∫–∞ –º–µ—Ç—Ä–∏–∫ mAP')
    ax.set_xlabel('–≠–ø–æ—Ö–∏')
    ax.set_ylabel('–ó–Ω–∞—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫–∏')
    ax.legend()
    ax.grid(True)
    st.pyplot(fig)
    
    st.markdown("""
    ### –ö–ª—é—á–µ–≤—ã–µ –≤—ã–≤–æ–¥—ã:
    - –õ—É—á—à–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –¥–æ—Å—Ç–∏–≥–∞—é—Ç—Å—è –ø–æ—Å–ª–µ 15 —ç–ø–æ—Ö–∏
    - mAP50: 0.879
    - mAP50-95: 0.586
    """)
except Exception as e:
    st.error(f"–û—à–∏–±–∫–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤: {str(e)}")

# --- –ü–æ–¥–≤–∞–ª ---
st.markdown("---")
st.caption("–†–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–æ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Streamlit –∏ Ultralytics YOLOv8 | ¬© 2023")